# -*- coding: utf-8 -*-
"""Copy of Welcome To Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xbaWfE0RcHmTIXeD99__7ukF4Cy0R_R2
"""

a=[1,2,3,4,5,6,7,8,9]
a.reverse()
print(a)

string=input("Enter a string : ")

if(string==string[::-1]):
  print("The string is a palindrome")

else:
  print("The string is not a palindrome")

n=int(input("Enter a number : "))
fact=1
for i in range(1,n+1):
  fact=fact*i
print(fact)

x=5
y=9

print("Before swapping the value of x is : ",x)
print("Before swapping the value of y is : ",y)

temp=x
x=y
y=temp

print("After swapping the value of x is : ",x)
print("After swapping the value of y is : ",y)

a=[1,4,2,6,3,5,7]
print(max(a))

a=[1,2,3,4,5]
print(sum(a))

a=[1,5,3,6,3,6,8,4]
list=[]
for i in a:
  if i not in list:
    list.append(i)
print("The final list after removing duplicates : ",list)

dict1={"Car":5,"Bike":7}
dict2={"Bus":9,"Train":4}
result=dict1|dict2
print(result)

string=input("Enter a string : ")
print(len(string))

a=input("Enter a string : ")
print(a.upper())

a={'a':7,'b':9,'c':5}
key=input()
if key in a:
  print("The key exists in the given dictionary")
else:
  print("The key does not exist in the given dictionary")

a=[('a',3),('b',5),('c',9),('d',7)]
a.sort(key=lambda x:x[1])
print(a)

class Programming:
    DataStructures = True
    Algorithms = True
    def practice(self):
        print("Practice makes a man perfect")
    def consistency(self):
        print("Hard work along with consistency can defeat Talent")
class Python(Programming):
    def consistency(self):
        print("Hard work along with consistency can defeat Talent.")

Py = Python()
Py.consistency()
Py.practice()

a={1,2,3,4,5,6,7}
b={7,8,9,10,11,12}
c=a&b
print("The common element is",c)

a=[]
for i in range(10,21):
  if i%2==0:
    a.append(i)
print(a)

a=["Car","Bus","Train","Plane"]
print(a)
a.remove("Plane")
print(a)

a=[1,2,9,7,6,8,4,7,5,3,7]
x=7
count=0
for i in a:
  if(i==x):
    count=count+1
print(f"The number {x} has occurred {count} times.")

a=[1,2,3,4,5]
b=[5,6,7,8,9]
c=[6,5,4,3,2,1]
common=[]
for i in a:
  if i in b and i in c:
    common.append(i)
print(common)

class Parent:
  def greet(self):
    print("Hello! I am Parent class")
class Child(Parent):
  pass
c=Child()
c.greet()

nested_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
flattened_list = [item for sublist in nested_list for item in sublist]
print(flattened_list)

a="I am an Indian"
for i in a:
  if a.count(i)==1:
    print(i)
    break;

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

person1 = Person("John", 25)
print(person1.name)
print(person1.age)

x=86
y=44
n=min(x,y)
gcd=0
for i in range(1,n+1):
  if x%i==0 and y%i==0:
     gcd=i
print(f"The GCD of {x} and {y} is {gcd}.")

n=int(input("Enter a number : "))
a=0
b=1
sum=a+b
count=1
while count<=n:
  count=count+1
  print(a)
  a=b
  b=sum
  sum=a+b

l=[("a",1),("b",2),("c",3),("d",4)]
d={}
for (x,y) in l:
  d.setdefault(x, []).append(y)
print(d)

import numpy as np
a=[1,2,3,4,5,6,7,8,9]
np.array(list)
a

a=np.zeros(7)
a

a=np.ones(5)
a

a=np.arange(10)
a

a=int(input("Enter the size of identity matrix : "))
identity_matrix=np.identity(a,dtype="int")
identity_matrix

a=np.array([[1,2,3],[4,5,6]])
a.shape

a=np.array([1,2,3,4,5,6,7,8,9,10])
arr=a.reshape(2,5)
arr

a=np.array([1,2,3,4,5,6,7,8,9])
arr=np.flip(a)
arr

a=np.array([1,2,3,4,5])
b=np.array([6,7,8,9,10])
c=np.concatenate((a,b))
c

a=np.array([1,2,3,4,5,6,7])
np.max(a)

a=np.array([1,2,3,4,5,6,7])
np.min(a)

a=np.array([1,4,7,3,8])
np.mean(a)

a=np.array([1,5,34,23])
np.std(a)

a=np.array([1,2,3,4,5])
np.sum(a)

#1D array
a=np.array([1,2,3,4,5])
print("The 1D array : ",a)
print()

#2D array
b=np.array([[1,2,3,4,5],[6,7,8,9,10]])
print("The 2D array : ",b)
print()

#3D array
c=np.array([[[1,2,3],[4,5,6]],[[7,8,9],[10,11,12]]])
print("The 3D array : ",c)

a=np.array([1,2,3,4,5])
b=np.array([6,7,8,9,10])
sum=np.add(a,b)
print(sum)

a=np.array([1,2,3,4,5])
b=np.array([6,7,8,9,10])
product=np.multiply(a,b)
print(product)

a=np.array([[1,2,3],[4,5,6]])
arr=np.transpose(a)
arr

a=np.array([[2,4],[7,9]])
arr=np.linalg.inv(a)
arr

a=np.array([1,6,3,8,5,9,7])
arr=np.sort(a)
arr

random=np.random.randint(0,10)
random

import pandas as pd
df=pd.read_csv("filmtv_movies.csv")
df

df["duration"].mean()

df["avg_vote"].max()

res=df.loc[df['title']=='18 anni tra una settimana','total_votes'].values[0]
res

votes=df.loc[df['critics_vote'].idxmax()]
votes

res=df.loc[df['title']=='Ride a Wild Pony','genre'].values[0]
res

filtered_df=df[df['title']=="Bugs Bunny's Third Movie:1001 Rabbit Tales"]
count=filtered_df['directors'].count()
count

res=df.loc[df['humor'].idxmax()]
res

avg=df['rhythm'].mean()
avg

res=df.loc[df['public_vote'].idxmin()]
res

res=df.loc[df['title']=='Diner','year'].values[0]
res

res=df.loc[df['title']=='18 anni tra una settimana','country'].values[0]
res

res=df.loc[df['title']=='In Bed With Madonna','erotism'].values[0]
res

avg=df['tension'].mean()
avg

res=df.loc[df['duration'].idxmax()]
res

res=df.loc[df['title']=='Ride a Wild Pony','directors'].values[0]
res

res=df.loc[df['title']=='Ride a Wild Pony','total_votes'].values[0]
res

filtered_df=df[df['title']=="Mr. Majestyk"]
count=filtered_df['actors'].count()
count

res=df.loc[df['total_votes'].idxmax()]
res

res=df.loc[df['title']=='Ride a Wild Pony','rhythm'].values[0]
res

res=df.loc[df['description']=='youngdrifter','title'].values[0]
res

res=df.loc[df['title']=='ArrÃªt sur image','genre'].values[0]
res

count=df.loc[df['title']=='erotism==0'].shape[0]
count

avg=df['public_vote'].mean()
avg

res=df.loc[df['description']=='Warner cartoons','title'].values[0]
res

import matplotlib.pyplot as plt
plt.bar(df['year'],df['title'])
plt.show()